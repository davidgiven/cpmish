; cpmish BIOS Â© 2019 David Given
; This file is distributable under the terms of the 2-clause BSD license.
; See COPYING.cpmish in the distribution root directory for more information.

; This is a general purpose TTY core, providing both the various primitives
; needed by the terminal emulator, and various helpers which wrap tty_putc. It
; takes care of tracking the cursor position, current attributes, etc. It
; expects tty_putc and tty_rawwrite to be provided. It's intended to be loaded
; with maclib so that various options can be provided.

tty_cursorx:    db 0
tty_cursory:    db 0 ; must be immediately after tty_cursory
tty_attributes: db 0

; --- Clears (and initialises) the screen -----------------------------------

tty_init:
    xor a
    ld (tty_attributes), a
    ; fall through
tty_clear_home:
    call tty_home_cursor
    jr tty_clear_to_eos
    
tty_home_cursor:
	ld hl, 0
	ld (tty_cursorx), hl
    ret

; --- Prints a zero-terminated string in HL ---------------------------------

; Prints a zero-terminated string in hl.
tty_puts:
    ld a, (hl)
    or a
    ret z
    inc hl
    push hl
    call tty_putc
    pop hl
    jr tty_puts

; Prints an inline string.
tty_putsi:
    pop hl
    call tty_puts
    inc hl
    jp (hl)

; --- Prints the hex bytes in HL or A ---------------------------------------

; prints HL
tty_puthex16:
    ld a, h
    call tty_puthex8
    ld a, l
tty_puthex8:
    ld c, a
    rra
    rra
    rra
    rra
    call .1
    ld a, c
.1
    and 15
    add a, 0x90
    daa
    adc a, 0x40
    daa
    push hl
    push bc
    call tty_putc
    pop bc
    pop hl
    ret

; --- Prints the decimal number in HL ---------------------------------------

tty_putdec16:
    ld d, 0             ; suppress zeroes
    ld bc, -10000
    call .1
    ld bc, -1000
    call .1
    ld bc, -100
    call .1
    ld bc, -10
    call .1
    dec d               ; don't suppress this zero
    ld bc, -1
.1                      ; loop which prints one digit
    ld a, '0'-1
.2
    inc a
    add hl, bc
    jr c, .2            ; keep subtracting bc to get one digit
    sbc hl, bc          ; under last subtraction (carry is known to be clear)

    ; Did we get a zero?
    cp '0'
    jr z, .3
    ; Not a zero.
    dec d               ; don't suppress zeroes any more
.4
    push hl             ; print the digit
    push de
    call tty_putc
    pop de
    pop hl
    ret

    ; We got a zero.
.3
    bit 7, d            ; are we suppressing zeroes?
    ret z               ; yes.
    jr .4               ; no, so print it anyway.

; --- Screen clearing -------------------------------------------------------

    if EMULATE_CLEAR_TO_EOL
tty_clear_to_eol:
    ld a, (tty_cursorx)
    push af
.1:
    ld a, (tty_cursorx)
    cp SCREEN_WIDTH
    jr z, .2
    ld a, ' '
    call tty_rawwrite
    ld hl, tty_cursorx
    inc (hl)
    jr .1
.2:
    pop af
    ld (tty_cursorx), a
    ret
    endif

    if EMULATE_CLEAR_TO_EOS
tty_clear_to_eos:
    ld hl, (tty_cursorx)
    push hl
    xor a
    ld (tty_cursorx), a
.1
    ld a, (tty_cursory)
    inc a
    cp SCREEN_HEIGHT
    jr z, .2
    ld (tty_cursory), a
    call tty_clear_to_eol
    jr .1
.2
    pop hl
    ld (tty_cursorx), hl
    jr tty_clear_to_eol
    endif

; --- Performs a carriage return --------------------------------------------

tty_newline:
    call tty_cursor_down_and_scroll
    ; fall through
tty_carriagereturn:
    xor a
    ld (tty_cursorx), a
    ret

; --- Move the cursor -------------------------------------------------------

tty_cursor_left:
    ld hl, tty_cursorx
    dec (hl)
    ret p
    inc (hl)
    ret

tty_cursor_up_and_scroll:
	call tty_cursor_up
	ret p
	jr tty_insert_line

; Returns m if we were on the top line.
tty_cursor_up:
    ld hl, tty_cursory
    dec (hl)
    ret p
	ld (hl), 0
    ret

tty_cursor_right:
    ld hl, tty_cursorx
    ld a, (hl)
    inc a
    cp SCREEN_WIDTH
    ret z
    ld (hl), a
    ret

; Returns z if we were on the top line.
tty_cursor_down:
    ld hl, tty_cursory
	inc (hl)
	ld a, (hl)
    cp SCREEN_HEIGHT
    ret nz
    ld (hl), SCREEN_HEIGHT-1; oops, don't go the next line after all
	ret

tty_cursor_down_and_scroll:
	call tty_cursor_down
	ret nz
tty_scroll:
	ld hl, tty_cursory
	ld a, (hl)
	push af
	ld (hl), 0
	call tty_delete_line
	pop af
	ld (tty_cursory), a
	ret

; Move to (B, C).
tty_goto_xy:
    ld a, b
    cp SCREEN_WIDTH
    ret nc
    ld (tty_cursorx), a

    ld a, c
    cp SCREEN_HEIGHT
    ret nc
    ld (tty_cursory), a
    ret

tty_tab:
	ld a, 32
	call tty_putc
	ld a, (tty_cursorx)
	and 0xf8
	jr nz, tty_tab
	ret

; vim: sw=4 ts=4 expandtab ft=asm

